---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Recipe Scraper - Home">
  <div class="max-w-xl mx-auto">
    <h2 class="text-2xl font-bold mb-6 text-center">Scrape a Recipe</h2>
    
    <div class="bg-white p-6 rounded-lg shadow-md">
      <form id="recipeForm" class="space-y-4">
        <div>
          <label for="recipeUrl" class="block text-sm font-medium text-gray-700 mb-1">Recipe URL</label>
          <input 
            type="url" 
            id="recipeUrl" 
            name="recipeUrl" 
            placeholder="https://www.example.com/recipe" 
            required
            class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-emerald-500"
          />
        </div>
        
        <button 
          type="submit" 
          class="w-full bg-emerald-600 text-white py-2 px-4 rounded-md hover:bg-emerald-700 transition-colors"
        >
          Scrape Recipe
        </button>
      </form>
    </div>
    
    <div id="result" class="mt-8 hidden">
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-xl font-bold mb-4" id="recipeTitle">Recipe Title</h3>
        
        <div class="mb-6">
          <h4 class="font-bold text-lg mb-2">Ingredients</h4>
          <ul id="ingredientsList" class="list-disc ml-6 space-y-1"></ul>
        </div>
        
        <div class="mb-6">
          <h4 class="font-bold text-lg mb-2">Instructions</h4>
          <ol id="instructionsList" class="list-decimal ml-6 space-y-2"></ol>
        </div>
        
        <button 
          id="saveRecipe" 
          class="bg-emerald-600 text-white py-2 px-4 rounded-md hover:bg-emerald-700 transition-colors"
        >
          Save to My Recipes
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Client-side script for recipe scraping
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('recipeForm');
    const result = document.getElementById('result');
    const recipeTitle = document.getElementById('recipeTitle');
    const ingredientsList = document.getElementById('ingredientsList');
    const instructionsList = document.getElementById('instructionsList');
    const saveButton = document.getElementById('saveRecipe');
    
    let currentRecipe = null;
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const url = document.getElementById('recipeUrl').value;
      
      try {
        // Show loading state
        form.querySelector('button').textContent = 'Scraping...';
        form.querySelector('button').disabled = true;
        
        // Call our API endpoint to scrape the recipe
        const response = await fetch('/api/scrape', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ url }),
        });
        
        if (!response.ok) {
          throw new Error('Failed to scrape recipe');
        }
        
        const recipe = await response.json();
        currentRecipe = recipe;
        
        // Update the UI with the scraped recipe
        recipeTitle.textContent = recipe.title;
        
        // Clear previous lists
        ingredientsList.innerHTML = '';
        instructionsList.innerHTML = '';
        
        // Add ingredients
        recipe.ingredients.forEach(ingredient => {
          const li = document.createElement('li');
          li.textContent = ingredient;
          ingredientsList.appendChild(li);
        });
        
        // Add instructions
        recipe.instructions.forEach(instruction => {
          const li = document.createElement('li');
          li.textContent = instruction;
          instructionsList.appendChild(li);
        });
        
        // Show the result
        result.classList.remove('hidden');
        
        // Reset form state
        form.querySelector('button').textContent = 'Scrape Recipe';
        form.querySelector('button').disabled = false;
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to scrape the recipe. Please check the URL and try again.');
        
        // Reset form state
        form.querySelector('button').textContent = 'Scrape Recipe';
        form.querySelector('button').disabled = false;
      }
    });
    
    saveButton.addEventListener('click', async () => {
      if (!currentRecipe) return;
      
      try {
        saveButton.textContent = 'Saving...';
        saveButton.disabled = true;
        
        // Save the recipe to database via API
        const response = await fetch('/api/saveRecipe', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(currentRecipe),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          if (response.status === 409) {
            alert('This recipe is already in your collection!');
          } else {
            throw new Error(data.error || 'Failed to save recipe');
          }
        } else {
          alert('Recipe saved successfully!');
        }
        
        saveButton.textContent = 'Save to My Recipes';
        saveButton.disabled = false;
      } catch (error) {
        console.error('Error saving recipe:', error);
        alert('Failed to save the recipe.');
        
        saveButton.textContent = 'Save to My Recipes';
        saveButton.disabled = false;
      }
    });
  });
</script>
