---
import Layout from '../layouts/Layout.astro';
---

<Layout title="My Recipes">
  <div class="container mx-auto max-w-4xl">
    <h2 class="text-2xl font-bold mb-6">My Recipe Collection</h2>
    
    <div id="noRecipes" class="bg-white p-6 rounded-lg shadow-md text-center">
      <p class="text-gray-600">You don't have any saved recipes yet.</p>
      <a href="/" class="inline-block mt-4 bg-emerald-600 text-white py-2 px-4 rounded-md hover:bg-emerald-700 transition-colors">
        Go Scrape Some Recipes
      </a>
    </div>
    
    <div id="recipeList" class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
      <!-- Recipe cards will be inserted here -->
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const noRecipes = document.getElementById('noRecipes');
    const recipeList = document.getElementById('recipeList');
    
    // Get saved recipes from localStorage
    const recipes = JSON.parse(localStorage.getItem('recipes') || '[]');
    
    if (recipes.length === 0) {
      noRecipes.classList.remove('hidden');
      recipeList.classList.add('hidden');
    } else {
      noRecipes.classList.add('hidden');
      recipeList.classList.remove('hidden');
      
      // Sort recipes by date saved (newest first)
      recipes.sort((a, b) => new Date(b.dateSaved) - new Date(a.dateSaved));
      
      // Add recipe cards to the list
      recipes.forEach(recipe => {
        const card = document.createElement('div');
        card.className = 'bg-white p-6 rounded-lg shadow-md';
        
        // Format date
        const date = new Date(recipe.dateSaved);
        const formattedDate = date.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        });
        
        // Set up card content
        card.innerHTML = `
          <h3 class="text-xl font-bold mb-2">${recipe.title}</h3>
          <p class="text-sm text-gray-500 mb-4">Saved on ${formattedDate}</p>
          
          <div class="mb-4">
            <h4 class="font-bold text-sm uppercase text-gray-600 mb-1">Ingredients</h4>
            <ul class="list-disc ml-5 text-sm space-y-1">
              ${recipe.ingredients.slice(0, 3).map(item => `<li>${item}</li>`).join('')}
              ${recipe.ingredients.length > 3 ? `<li class="text-gray-500">+${recipe.ingredients.length - 3} more...</li>` : ''}
            </ul>
          </div>
          
          <div class="flex justify-between">
            <button class="view-recipe text-emerald-600 hover:text-emerald-800 text-sm font-medium"
                    data-recipe-index="${recipes.indexOf(recipe)}">
              View Full Recipe
            </button>
            <button class="delete-recipe text-red-600 hover:text-red-800 text-sm font-medium"
                    data-recipe-index="${recipes.indexOf(recipe)}">
              Delete
            </button>
          </div>
        `;
        
        recipeList.appendChild(card);
      });
      
      // Add event listeners for view recipe buttons
      document.querySelectorAll('.view-recipe').forEach(button => {
        button.addEventListener('click', () => {
          const index = parseInt(button.getAttribute('data-recipe-index'));
          const recipe = recipes[index];
          
          // Create modal for viewing the full recipe
          const modal = document.createElement('div');
          modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50';
          
          const modalContent = document.createElement('div');
          modalContent.className = 'bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-90vh overflow-y-auto';
          
          modalContent.innerHTML = `
            <div class="p-6">
              <div class="flex justify-between items-start mb-4">
                <h3 class="text-2xl font-bold">${recipe.title}</h3>
                <button class="close-modal text-gray-500 hover:text-gray-700">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <p class="text-sm text-gray-500 mb-4">
                <a href="${recipe.sourceUrl}" target="_blank" class="underline">Original Source</a>
              </p>
              
              <div class="mb-6">
                <h4 class="font-bold text-lg mb-2">Ingredients</h4>
                <ul class="list-disc ml-6 space-y-1">
                  ${recipe.ingredients.map(item => `<li>${item}</li>`).join('')}
                </ul>
              </div>
              
              <div class="mb-6">
                <h4 class="font-bold text-lg mb-2">Instructions</h4>
                <ol class="list-decimal ml-6 space-y-2">
                  ${recipe.instructions.map(item => `<li>${item}</li>`).join('')}
                </ol>
              </div>
            </div>
          `;
          
          modal.appendChild(modalContent);
          document.body.appendChild(modal);
          
          // Add event listener to close modal
          modal.querySelector('.close-modal').addEventListener('click', () => {
            document.body.removeChild(modal);
          });
          
          // Close modal when clicking outside
          modal.addEventListener('click', (e) => {
            if (e.target === modal) {
              document.body.removeChild(modal);
            }
          });
        });
      });
      
      // Add event listeners for delete recipe buttons
      document.querySelectorAll('.delete-recipe').forEach(button => {
        button.addEventListener('click', () => {
          const index = parseInt(button.getAttribute('data-recipe-index'));
          
          if (confirm('Are you sure you want to delete this recipe?')) {
            // Remove recipe from array
            recipes.splice(index, 1);
            
            // Update localStorage
            localStorage.setItem('recipes', JSON.stringify(recipes));
            
            // Refresh page to reflect changes
            window.location.reload();
          }
        });
      });
    }
  });
</script> 